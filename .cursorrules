# Newspaper.AI Project

## Lessons

### User Specified Lessons
- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

### Cursor learned
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing a React application with TypeScript, ensure that the TypeScript types for React and other libraries are properly installed to avoid linter errors
- When testing React components with Vitest, ensure to create a proper setup file that includes necessary mocks for browser APIs like matchMedia and localStorage
- For Vite projects, define custom environment variables in a vite-env.d.ts file using the ImportMetaEnv interface to ensure proper TypeScript integration
- When setting up E2E tests with Playwright for React applications, create test files in a separate test directory and configure Playwright to start the dev server automatically
- For CI/CD pipelines, ensure that GitHub Actions workflows are set up with appropriate caching to speed up builds and proper test commands
- When deploying React apps to Render, ensure the render.yaml file includes proper redirect rules for SPA routing and environment variable configuration
- React Three Fiber hooks (useFrame, useThree) must be used within a Canvas component context, otherwise they will cause errors during runtime
- When working with Supabase, ensure field names in code match exactly with the database schema column names - for example, if you see "Could not find the 'categories' column" error, check if the field might be called "interests" in the database
- For better user experience, don't require users to complete onboarding immediately - allow them to browse the site first and complete profile setup later when they're ready
- When designing modern UIs, use higher contrast ratios between background and text for better readability and accessibility
- When encountering Supabase schema errors, implement graceful fallbacks and user-friendly error messages that don't alarm users with technical details
- When working with Supabase, make sure your database field names in code match the actual column names in the database schema - mismatches like using 'interests' in code when the database column is named 'categories' will cause errors
- When deploying SPA React applications to Render, set the rewrite rule destination to '/index.html' instead of just '/' to ensure proper routing for direct URL access and page refreshes
- When deploying to Render, use `npm start` as the startCommand rather than directly calling `node server.js` to ensure proper script execution and environment variable access
- When deploying large React applications with Three.js to Render, increase memory limits with NODE_OPTIONS="--max_old_space_size=3072" and create a fallback build script for more resilient deployments
- When deploying Node.js servers, avoid direct or indirect dependencies on iconv-lite version 0.4.24 which has compatibility issues with Node.js 18.x - either upgrade the package or remove dependencies that rely on it
- When deploying to Render with Node.js 18, consider using the built-in http module instead of Express when encountering dependency issues, as Express has many transitive dependencies that can cause compatibility problems
- When working with framer-motion in TypeScript, use the HTMLMotionProps generic type to properly type motion components and avoid type errors
- When implementing a 3D card design system, create reusable utility classes in Tailwind CSS to avoid repeating CSS transforms and shadow styles
- When using CSS custom properties for a theming system, organize them by component or feature to make maintenance easier
- For 3D hover effects, use a combination of transform, box-shadow, and transition properties to create a cohesive animation effect
- When implementing design systems, use the cva (class-variance-authority) library to handle component variants and maintain consistency
- Always implement a fallback mechanism for 3D effects for users with reduced motion preferences

## Scratchpad

### Project Overview: Newspaper.AI

Newspaper.AI is an AI-powered news aggregator with personalized content delivery. The app combines TikTok-like consumption speed with AI-generated summaries and analysis of news articles, tailored to each user.

#### Tech Stack:
- Frontend: React, Tailwind CSS, shadcn/ui, Framer Motion
- Backend: Node.js, Supabase
- AI: OpenRouter (OpenAI integration)
- Location: Radar API
- News Sources: Multiple news APIs (TheNewsAPI, NewsData.io, ApiTube, NewsAPI)
- Deployment: Render
- Testing: Vitest (unit), Playwright (E2E)

#### UI Implementation Plan:

1. Base Structure Setup
[ ] Create responsive layout with fluid grid system
[ ] Set up HTML5 semantic structure
[ ] Implement viewport meta tags
[ ] Create flexible container system

2. Card-Based UI Implementation
[ ] Design reusable card component variants
[ ] Create card containers with CSS Grid
[ ] Implement variable card heights
[ ] Add box shadows and hover effects
[ ] Configure card header and body

3. Color System Implementation
[ ] Set up CSS custom properties
[ ] Create base theme with light/dark variants
[ ] Implement accent color system
[ ] Set up color mapping for categories
[ ] Add color contrast checking

4. Typography Implementation
[ ] Set up type scale system
[ ] Configure primary and secondary fonts
[ ] Implement responsive typography
[ ] Configure line heights and character counts
[ ] Add text rendering optimizations

5. Navigation and Header
[ ] Create sticky header
[ ] Implement primary navigation
[ ] Add search component
[ ] Create user account section
[ ] Implement theme toggle

6. Personalization Features
[ ] Set up user preferences system
[ ] Create onboarding flow
[ ] Implement "For You" section
[ ] Design content filters
[ ] Create reading history and saved articles

7. Article View Implementation
[ ] Design immersive reading experience
[ ] Implement progressive loading
[ ] Add reading time indicators
[ ] Create related content section
[ ] Design persistent navigation

8. Micro-interactions and Animation
[ ] Implement loading animations
[ ] Create view transitions
[ ] Design pull-to-refresh
[ ] Add hover effects
[ ] Implement scroll animations

9. Media Integration
[ ] Set up lazy loading
[ ] Create responsive images
[ ] Implement video players
[ ] Design audio controls
[ ] Create image galleries

10. Performance Optimization
[ ] Set up code splitting
[ ] Implement image optimization
[ ] Configure caching
[ ] Set up resource hints
[ ] Create skeleton loading

11. Accessibility Implementation
[ ] Ensure semantic HTML
[ ] Add ARIA attributes
[ ] Implement keyboard navigation
[ ] Create focus states
[ ] Ensure color contrast

12. Cross-browser Compatibility
[ ] Test layout consistency
[ ] Add vendor prefixes
[ ] Implement feature detection
[ ] Create fallbacks
[ ] Ensure touch interactions

13. Analytics Integration
[ ] Set up event tracking
[ ] Implement scroll depth tracking
[ ] Create custom dimensions
[ ] Set up conversion funnels
[ ] Implement heat mapping

#### Current Progress:
- Basic application structure is set up
- Pages created: Home, Auth, Onboarding, NewsFeed, Profile, SearchResults, NotFound
- Services: Supabase auth, news service, AI summary service
- Authentication flow implemented with Supabase
- Onboarding process connects to Supabase for storing user preferences
- News feed fetches news based on user preferences
- Added ArticleDetail component with tabbed interface for viewing article details
- Implemented loading and error states in the NewsFeed component
- Integrated AI summary functionality for personalized article relevance
- Fixed TypeScript type errors by installing necessary type packages
- Added user profile management for updating preferences
- Added navigation between NewsFeed and Profile pages
- Implemented dark mode toggle with theme persistence
- Applied dark mode styles throughout the application
- Added search functionality with a dedicated search results page
- Implemented error boundaries for better fault tolerance
- Added unit tests for components using Vitest
- Added E2E tests with Playwright for critical user flows
- Set up CI/CD pipeline with GitHub Actions for testing and deployment to Render
- Created deployment guide for Render with step-by-step instructions
- Built the application successfully for production deployment
- Fixed R3F hooks error by properly wrapping components in Canvas
- Created simplified deployment guide and prepared app for production deployment

#### Next Steps:
[ ] Implement new UI system with all the planned features
[ ] Test and optimize performance
[ ] Deploy to Render
[ ] Monitor analytics and user feedback

#### Final Improvements:
- Refine UI and UX with smoother transitions
- Add empty state illustrations for better user experience
- Implement progressive loading of articles (infinite scroll)
- Add ability to share articles via social media

#### Issues to fix:
- Fix article content styling and layout for better readability 

## Current Task: Deploying the app to Render

[X] Create detailed deployment guide (DEPLOYMENT_STEPS.md)
[X] Update deployment shell script with better error handling and UI
[X] Create a deployment verification script
[X] Push all changes to GitHub repository

We've prepared all the necessary files and information for deploying the Newspaper.AI application to Render. The deployment can be done using either:

1. **Render Blueprint** - Using the existing render.yaml file (recommended)
2. **Manual Web Service Setup** - Through the Render dashboard

All the environment variables needed for deployment are documented in DEPLOYMENT_STEPS.md and available in the helper scripts.

## Next Steps:
1. Use the Render dashboard to create the deployment
2. Add all required environment variables
3. Monitor the deployment process
4. Use verify-deployment.js to verify the deployment works correctly
5. Manually test key functionality

## Lessons Learned:
- Supabase field names in code need to match exactly with database column names
- A better user experience is to allow browsing before requiring profile setup
- Higher contrast ratios improve readability and accessibility 